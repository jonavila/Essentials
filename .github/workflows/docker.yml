name: Branch Build Using Docker

on:
  push:
    branches:
      - feature/*
      - hotfix/*
      - bugfix/*
      - release/*
      - development

env:
  # solution path doesn't need slashes unless there it is multiple folders deep
  # solution name does not include extension. .sln is assumed
  SOLUTION_PATH: PepperDashEssentials
  SOLUTION_FILE: PepperDashEssentials
  # Do not edit this, we're just creating it here
  VERSION: 0.0.0-buildtype-buildnumber
  # Defaults to debug for build type
  BUILD_TYPE: Debug
  # Defaults to main as the release branch.  Change as necessary
  RELEASE_BRANCH: main
jobs:
  Build_Project:
    runs-on: windows-latest
    steps:
      # First we checkout the source repo
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      # And any submodules
      - name: Checkout submodules
        shell: bash
        run: |
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
        # Fetch all tags
      - name: Fetch tags
        run: git fetch --tags
      # Generate the appropriate version number
      - name: Set Version Number
        shell: powershell
        run: |
          $version = ./.github/scripts/GenerateVersionNumber.ps1
          Write-Output "::set-env name=VERSION::$version"
      # Use the version number to set the version of the assemblies
      - name: Update AssemblyInfo.cs
        shell: powershell
        run: |
          Write-Output ${{ env.VERSION }}
          ./.github/scripts/UpdateAssemblyVersion.ps1 ${{ env.VERSION }}
      # Login to Docker
      - name: Login to Docker
        uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      # Build the solutions in the docker image
      - name: Build Solution
        shell: powershell
        run: |
          Invoke-Expression "docker run --rm --mount type=bind,source=""$($Env:GITHUB_WORKSPACE)"",target=""c:/project"" pepperdash/sspbuilder c:\cihelpers\vsidebuild.exe -Solution ""c:\project\$($Env:SOLUTION_FILE).sln"" -BuildSolutionConfiguration $($ENV:BUILD_TYPE)"
      # Zip up the output files as needed
      - name: Zip Build Output
        shell: powershell
        run: ./.github/scripts/ZipBuildOutput.ps1
      # Write the version to a file to be consumed by the push jobs
      - name: Write Version
        run: Write-Output "$($Env:VERSION)" | Out-File -FilePath "$($Env:GITHUB_HOME)\output\version.txt"
      # Upload the build output as an artifact
      - name: Upload Build Output
        uses: actions/upload-artifact@v1
        with:
          name: Build
          path: ./${{ env.SOLUTION_FILE}}-${{ env.VERSION}}.zip
      # Upload the Version file as an artifact
      - name: Upload version.txt
        uses: actions/upload-artifact@v1
        with:
          name: Version
          path: ${{env.GITHUB_HOME}}\output\version.txt
      # Create the release on the source repo
      - name: Create tag for non-rc builds
        if: contains(env.VERSION, 'alpha') || contains(env.VERSION, 'beta')
        run: |
          git tag $($Env:VERSION)
          git push --tags origin
      - name: Create Release
        id: create_release
        # using contributor's version to allow for pointing at the right commit
        if: contains(env.VERSION,'-rc-') || contains(env.VERSION,'-hotfix-')
        uses: fleskesvor/create-release@feature/support-target-commitish
        with:
          tag_name: ${{ env.VERSION  }}
          release_name: ${{ env.VERSION }}
          prerelease: ${{contains('debug', env.BUILD_TYPE)}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Upload the build package to the release
      - name: Upload Release Package
        if: contains(env.VERSION,'-rc-') || contains(env.VERSION,'-hotfix-')
        id: upload_release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.SOLUTION_FILE}}-${{ env.VERSION}}.zip
          asset_name: ${{ env.SOLUTION_FILE}}-${{ env.VERSION}}.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # This step always runs and pushes the build to the internal build rep
  Internal_Push_Output:
    needs: Build_Project
    runs-on: windows-latest
    steps:
      - name: check Github ref
        run: ${{toJson(github.ref)}}
      # Checkout the repo
      - name: Checkout Builds Repo
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.BUILDS_TOKEN }}
          repository: PepperDash-Engineering/essentials-builds
          ref: ${{ Env.GITHUB_REF }}
      # Download the version artifact from the build job
      - name: Download Build Version Info
        uses: actions/download-artifact@v1
        with:
          name: Version
      - name: Check Directory
        run: Get-ChildItem "./"
      # Set the version number environment variable from the file we just downloaded
      - name: Set Version Number
        shell: powershell
        run: |
          Get-ChildItem "./Version"
          $version = Get-Content -Path ./Version/version.txt
          Write-Host "Version: $version"
          Write-Output "::set-env name=VERSION::$version"
          Remove-Item -Path ./Version/version.txt
          Remove-Item -Path ./Version
      # Checkout/Create the branch
      - name: Create new branch
        run: git checkout -b $($Env:GITHUB_REF -replace "refs/heads/")
      # Download the build output into the repo
      - name: Download Build output
        uses: actions/download-artifact@v1
        with:
          name: Build
          path: ./
      - name: Check directory
        run: Get-ChildItem ./
      # Unzip the build package file
      - name: Unzip Build file
        run: |
          Get-ChildItem .\*.zip | Expand-Archive -DestinationPath .\
          Remove-Item -Path .\*.zip
      - name: Check directory again
        run: Get-ChildItem ./
      # Copy Contents of output folder to root directory
      - name: Copy Files to root & delete output directory
        run: |
          Remove-Item -Path .\* -Include @("*.cpz","*.md","*.cplz","*.json","*.dll","*.clz")  
          Get-ChildItem -Path .\output\* | Copy-Item -Destination .\
          Remove-Item -Path .\output -Recurse
      # Commits the build output to the branch and tags it with the version
      - name: Commit build output and tag the commit
        shell: powershell
        run: |
          git config user.email "actions@pepperdash.com"
          git config user.name "GitHub Actions"
          git add .
          $commit = "Build $($Env:GITHUB_RUN_NUMBER) from commit: https://github.com/$($Env:GITHUB_REPOSITORY)/commit/$($Env:GITHUB_SHA)"
          Write-Host "Commit: $commit"
          git commit -m $commit
          git tag $($Env:VERSION)
      # Push the commit
      - name: Push to Builds Repo
        shell: powershell
        run: |
          $branch = $($Env:GITHUB_REF) -replace "refs/heads/"
          Write-Host "Branch: $branch"
          git push -u origin $($branch) --force
      # Push the tags
      - name: Push tags
        run: git push --tags origin
      - name: Check Directory
        run: Get-ChildItem ./
  # This step only runs if the branch is main or release/ runs and pushes the build to the public build repo
  Public_Push_Output:
    needs: Build_Project
    runs-on: windows-latest
    if: contains(github.ref, 'main') || contains(github.ref, '/release/')
    steps:
      # Checkout the repo
      - name: check Github ref
        run: ${{toJson(github.ref)}}
      - name: Checkout Builds Repo
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.BUILDS_TOKEN }}
          repository: PepperDash/Essentials-Builds
          ref: ${{ Env.GITHUB_REF }}
      # Download the version artifact from the build job
      - name: Download Build Version Info
        uses: actions/download-artifact@v1
        with:
          name: Version
      - name: Check Directory
        run: Get-ChildItem "./"
      # Set the version number environment variable from the file we just downloaded
      - name: Set Version Number
        shell: powershell
        run: |
          Get-ChildItem "./Version"
          $version = Get-Content -Path ./Version/version.txt
          Write-Host "Version: $version"
          Write-Output "::set-env name=VERSION::$version"
          Remove-Item -Path ./Version/version.txt
          Remove-Item -Path ./Version
      # Checkout/Create the branch
      - name: Create new branch
        run: git checkout -b $($Env:GITHUB_REF -replace "refs/heads/")
      # Download the build output into the repo
      - name: Download Build output
        uses: actions/download-artifact@v1
        with:
          name: Build
          path: ./
      - name: Check directory
        run: Get-ChildItem ./
      # Unzip the build package file
      - name: Unzip Build file
        run: |
          Get-ChildItem .\*.zip | Expand-Archive -DestinationPath .\
          Remove-Item -Path .\*.zip
      - name: Check directory again
        run: Get-ChildItem ./
        # Copy Contents of output folder to root directory
      - name: Copy Files to root & delete output directory
        run: |
          Remove-Item -Path .\* -Include @("*.cpz","*.md","*.cplz","*.json","*.dll","*.clz")  
          Get-ChildItem -Path .\output\* | Copy-Item -Destination .\
          Remove-Item -Path .\output -Recurse
      # Commits the build output to the branch and tags it with the version
      - name: Commit build output and tag the commit
        shell: powershell
        run: |
          git config user.email "actions@pepperdash.com"
          git config user.name "GitHub Actions"
          git add .
          $commit = "Build $($Env:GITHUB_RUN_NUMBER) from commit: https://github.com/$($Env:GITHUB_REPOSITORY)/commit/$($Env:GITHUB_SHA)"
          Write-Host "Commit: $commit"
          git commit -m $commit
          git tag $($Env:VERSION)
      # Push the commit
      - name: Push to Builds Repo
        shell: powershell
        run: |
          $branch = $($Env:GITHUB_REF) -replace "refs/heads/"
          Write-Host "Branch: $branch"
          git push -u origin $($branch) --force
      # Push the tags
      - name: Push tags
        run: git push --tags origin
      - name: Check Directory
        run: Get-ChildItem ./
